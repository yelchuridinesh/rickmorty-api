name: CD Pipeline

on:
  workflow_run:
    workflows: ["Docker CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@v0.0.14
        with:
          driver: docker
          cpus: 2
          memory: 4096
          kubernetes-version: v1.30


      # - name: Write kind cluster config
      #   run: |
      #     cat <<EOF > kind-config.yaml
      #     kind: Cluster
      #     apiVersion: kind.x-k8s.io/v1alpha4
      #     nodes:
      #       - role: control-plane
      #         extraPortMappings:
      #           - containerPort: 80
      #             hostPort: 80
      #           - containerPort: 443
      #             hostPort: 443
      #     EOF


      # - name: Set up Kind cluster
      #   uses: helm/kind-action@v1.8.0
      #   with:
      #     cluster_name: rickmorty-cluster
      #     config: kind-config.yaml
      
      - name: Verify cluster is ready
        run: kubectl get nodes

      - name: Install PostgreSQL on postgres namespace
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          kubectl create namespace postgres
          helm install postgres bitnami/postgresql --namespace postgres \
            --set auth.postgresPassword=${{ secrets.PG_PASSWORD }} \
            --set auth.username=${{ secrets.PG_USERNAME }} \
            --set auth.database=${{ secrets.PG_DATABASE }}


      - name: Install Redis (auth disabled) on redis namespace
        run: |
          kubectl create namespace redis
          helm install redis bitnami/redis --namespace redis \
            --set auth.enabled=false

      - name: Install cert-manager on rickmorty namespace
        run: |
          kubectl create namespace rickmorty || true
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install cert-manager jetstack/cert-manager \
            --namespace rickmorty \
            --set installCRDs=true
      
      - name: Install Jaeger (all-in-one) in observability namespace
        run: |
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo update
          kubectl create namespace observability || true
          helm install jaeger jaegertracing/jaeger \
            --namespace observability \
            --set provisionDataStore.cassandra=false \
            --set storage.type=memory \
            --set query.basePath="/" \
            --set ingress.enabled=false


      - name: Install ingress-nginx on rickmorty namespace
        run: |
          kubectl create namespace ingress-nginx || true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx
      
      - name : check helm releases
        run: |
          helm list -A
          kubectl get all -n ingress-nginx
          kubectl get svc -n ingress-nginx
          kubectl get pods -n ingress-nginx
          kubectl get events -n ingress-nginx
          kubectl logs -n ingress-nginx -l app.kubernetes.io/instance=ingress-nginx

      
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io \
            --username "${{ github.actor }}" --password-stdin
      


      - name: Write Helm secret values
        run: |
          cat <<EOF > values-secret.yaml
          postgresconfig:
            user:     "${{ secrets.PG_USERNAME }}"
            password: "${{ secrets.PG_PASSWORD }}"
          EOF
      
      - name: Wait for Ingress NGINX
        run: |
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=240s
          kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io | grep ingress
          kubectl logs -n ingress-nginx -l app.kubernetes.io/instance=ingress-nginx



      - name: Deploy app using Helm
        run: |
          helm install rickmorty-app oci://ghcr.io/yelchuridinesh/helm/rickmorty-api \
            --version 1.0.0 \
            --namespace rickmorty \
            -f values-secret.yaml
      
      - name: get all resources in rickmorty namespace
        run: kubectl get all -n rickmorty

      - name: Start tunnel (in background)
        run: |
          minikube tunnel &
          sleep 15
          EXTERNAL_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNAL_IP

      - name: Run integration test against API Ingress
        run: |
          echo "Waiting for Ingress to become ready..."
          sleep 10
          EXTERNAL_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNAL_IP
          curl -k -H "Host: rickmorty-helm-git.127.0.0.1.nip.io" https://${EXTERNAL_IP}/characters?page=1&limit=5
      
      - name: Install kube-prometheus-stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --set grafana.ingress.enabled=true \
            --set grafana.ingress.ingressClassName=nginx \
            --set-string grafana.ingress.annotations."nginx\.ingress\.kubernetes\.io/ssl-redirect"="true" \
            --set-string grafana.ingress.annotations."cert-manager\.io/cluster-issuer"="selfsigned-issuer" \
            --set grafana.ingress.hosts[0]=grafana.127.0.0.1.nip.io \
            --set grafana.ingress.tls[0].hosts[0]=grafana.127.0.0.1.nip.io \
            --set grafana.ingress.tls[0].secretName=grafana-tls \
            --set grafana.sidecar.dashboards.enabled=true \
            --set grafana.sidecar.dashboards.label=grafana_dashboard \
            --set grafana.sidecar.dashboards.folder=/tmp/dashboards \
            --set prometheus.service.type=ClusterIP \
            --set alertmanager.service.type=ClusterIP

      - name: Generate Rick and Morty Grafana Dashboard JSON
        run: |
          cat <<EOF > grafana-dashboard.json
          {
            "annotations": {
              "list": [{"builtIn": 1, "type": "dashboard"}]
            },
            "title": "Rick and Morty API Metrics",
            "panels": [
              {
                "type": "graph",
                "title": "Request Latency (Histogram)",
                "targets": [
                  {
                    "expr": "rate(api_request_duration_seconds_bucket{handler=\"GetCharacters\"}[1m])",
                    "legendFormat": "{{le}}",
                    "refId": "A"
                  }
                ],
                "datasource": "Prometheus",
                "id": 1
              },
              {
                "type": "graph",
                "title": "Cache Hit Ratio",
                "targets": [
                  {
                    "expr": "api_cache_hits_total / (api_cache_hits_total + api_cache_misses_total)",
                    "legendFormat": "hit ratio",
                    "refId": "B"
                  }
                ],
                "datasource": "Prometheus",
                "id": 2
              },
              {
                "type": "graph",
                "title": "Characters Processed",
                "targets": [
                  {
                    "expr": "increase(api_characters_processed_total[5m])",
                    "legendFormat": "processed",
                    "refId": "C"
                  }
                ],
                "datasource": "Prometheus",
                "id": 3
              }
            ],
            "schemaVersion": 26,
            "version": 1
          }
          EOF


      - name: Create Grafana Dashboard ConfigMap
        run: |
          kubectl create configmap rickmorty-grafana-dashboard \
            --from-file=grafana-dashboard.json \
            -n monitoring \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Label ConfigMap for Grafana Sidecar
        run: |
          kubectl label configmap rickmorty-grafana-dashboard \
            grafana_dashboard=1 -n monitoring --overwrite
      
      - name: Create ServiceMonitor for RickMorty API
        run: |
          # fetch the name of the first port on the Service
          PORT_NAME=$(kubectl get svc rickmorty-app-rickmorty-api-service -n rickmorty \
            -o jsonpath='{.spec.ports[0].name}')
          echo "Using port name: $PORT_NAME"

          # apply a ServiceMonitor that uses that port name
          cat <<EOF | kubectl apply -f -
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          metadata:
            name: rickmorty-api-sm
            namespace: monitoring
            labels:
              release: monitoring
          spec:
            selector:
              matchLabels:
                app: rickmorty-api
            namespaceSelector:
              matchNames:
                - rickmorty
            endpoints:
              - port: ${PORT_NAME}
                path: /metrics
                interval: 30s
          EOF


      - name: Wait for Grafana Rollout
        run: kubectl rollout status deployment monitoring-grafana -n monitoring --timeout=180s

      
      - name: Download and configure ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok

      - name: Fetch Ingress External IP
        id: ingress-ip
        run: |
          IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "EXTERNAL_IP=$IP" >> $GITHUB_ENV

      - name: Start ngrok tunnel for Grafana HTTPS
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok http https://$EXTERNAL_IP:443 --host-header=grafana.127.0.0.1.nip.io > ngrok.log &
      
      - name: Print Ngrok public URL
        run: |
          sleep 10  # give ngrok time to start
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url'


      - name: Start SSH session (debug)
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 30
        continue-on-error: true

